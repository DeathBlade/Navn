#!/bin/bash
MAKEFILE="Makefile.am"
if [ -f $MAKEFILE ] ; then
  rm -rf $MAKEFILE
else
  echo "Making new makefile.."
fi
if [ -d runtime ] ; then
  echo derp &>/dev/null
else
  echo "Making a new runtime directory.."
  mkdir runtime
fi
# Write to file
modulelist=""
githead=$(git rev-parse HEAD)
rev=$(git describe ${githead} 2>/dev/null)
[[ -z ${rev} ]] && rev=${githead:0:7}
/bin/sed 's/^\x23define VERSION_GIT ".*"/\x23define VERSION_GIT "'$rev'"/' config.in.tmpl 1> config.h.in
echo "AUTOMAKE_OPTIONS 	= foreign" >> $MAKEFILE
echo "PERL = \$(srcdir)/run-cc.pl" >> $MAKEFILE
echo "LIBS = -ldl -lnsl -pthread" >> $MAKEFILE
echo "INCLUDES = -I\$(srcdir)/include -I\$(srcdir)" >> $MAKEFILE
echo "CXXFLAGS = \$(INCLUDES) -Wall -Wshadow -ansi -pedantic -fno-leading-underscore -pipe -o" >> $MAKEFILE
echo "POSTCOMPILEFLAGS= -std=gnu++0x" >> $MAKEFILE
echo "beginmsg:
	@echo \"This bot was created in C++ by Lordofsraam and Justasic from Flux-Net\"
	@echo \"Navn Version \$(VERSION)\"
	@echo \" \"" >> $MAKEFILE
echo "endmsg: " >> $MAKEFILE
echo "	@echo \" \"
	@echo \"Build complete. Run './\$(PACKAGE)' to execute the binary.\"" >> $MAKEFILE
echo "" >> $MAKEFILE
echo "navn:
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) main.o -c src/main.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) misc.o -c src/misc.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) module.o -c src/module.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) signal.o -c src/signal.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) Socket.o -c src/Socket.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) Sepstream.o -c src/Sepstream.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) process.o -c src/process.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) thread.o -c src/thread.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) ircproto.o -c src/ircproto.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) timers.o -c src/timers.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) user.o -c src/user.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) command.o -c src/command.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) channel.o -c src/channel.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) INIReader.o -c src/INIReader.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) log.o -c src/log.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) clock.o -c src/clock.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) textfile.o -c src/textfile.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -Dnavn_EXPORTS \$(CXXFLAGS) xmlfile.o -c src/xmlfile.cpp \$(POSTCOMPILEFLAGS)
	@\$(PERL) \$(CXX) -g -Wl,--export-dynamic main.o misc.o log.o signal.o module.o Socket.o Sepstream.o ircproto.o command.o channel.o thread.o timers.o user.o INIReader.o process.o clock.o textfile.o xmlfile.o -o \$(PACKAGE) -rdynamic  \$(POSTCOMPILEFLAGS) \$(LIBS)" >> $MAKEFILE
# Make sure the folder exists
if [ -d modules ] ; then
  shopt -s nullglob
  files=(modules/*.cpp)
  # Make sure there is at least one cpp file in there
  if [ ${#files[@]} -gt 0 ] ; then
    for file in modules/*.cpp ; do #Loop cred to Lordofsraam
    name=${file%\.*}
    bsoname=$name.so #full filename path
    name=${name##modules/}
    modulelist=`echo $modulelist $name.so`
    soname=$name.so #name only
    #These will be the contents of the file
    echo "$soname:" >> $MAKEFILE
    echo "	@\$(PERL) \$(CXX) -D"$name"_EXPORTS -fPIC \$(CXXFLAGS) $name.o -c $file \$(POSTCOMPILEFLAGS)" >> $MAKEFILE #build
    echo "	@\$(PERL) \$(CXX) -g \$(LIBS) -shared -Wl,-soname,$bsoname -o $bsoname $name.o \$(POSTCOMPILEFLAGS)" >> $MAKEFILE #Link
  done
  echo "" >> $MAKEFILE
  echo "modules: "$modulelist >> $MAKEFILE
  echo "" >> $MAKEFILE
  else
    echo "No modules found."
  fi
else
  echo "Module folder not found."
fi
echo "all-am: beginmsg navn "$modulelist" endmsg" >> $MAKEFILE

echo "clean:
	rm -f *.o *.so \$(PACKAGE) modules/*.so" >> $MAKEFILE
echo "dist-clean:
	rm -f *.o *.so \$(PACKAGE) config.h config.status
	rm -f *.o *.so modules/*.so" >> $MAKEFILE
if [ "$1" = "-nc" ] ; then
  echo "Generating Makefile complete!"
  echo "Skipping ./configure"
else
  echo "Generating Makefile complete!"
  /bin/bash configure
fi
